{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"body { background-image: url('/assets/background.png'); background-blend-mode: difference; background-size: contain; } .md-header, .md-tabs { background-color: unset; } .md-typeset .cover { display: none; } .md-typeset .cover + hr { display: none; } .md-typeset h1, .md-typeset h2 { color: navy; } .md-typeset .cards .card { padding: 1em; } .md-typeset .cards .col:first-of-type { margin-left: -1em; } .md-typeset .cards .col:last-of-type { margin-right: -1em; } .md-typeset .cards .card h2 { margin-top: 0; } Code Inside Out # Interesting stuff in Embedded Systems and IoT Applications. From hardware to cloud applications. Step by step. (\uff89 \u25d5 \u30ee \u25d5)\uff89*:\u30fb\uff9f \u2727 Blog # Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there. Read news Projects # A list of my projects which are done for learning and practicing in free time. Wanna give me a hand ?! Let\u2019s do it together. See projects","title":"Di\u00e1rio Code"},{"location":"#code-inside-out","text":"Interesting stuff in Embedded Systems and IoT Applications. From hardware to cloud applications. Step by step. (\uff89 \u25d5 \u30ee \u25d5)\uff89*:\u30fb\uff9f \u2727","title":"Code Inside Out"},{"location":"#blog","text":"Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there. Read news","title":" Blog"},{"location":"#projects","text":"A list of my projects which are done for learning and practicing in free time. Wanna give me a hand ?! Let\u2019s do it together. See projects","title":" Projects"},{"location":"blog/","text":"","title":"Recent posts"},{"location":"blog/site-setup/","text":"","title":"How to set up your site"},{"location":"blog/site-setup/add-new-features/","tags":["jinja","javascript"],"text":"Tags page # The tag page is the place to list all tags, and list all pages that have a common tag. A new page will be created at docs\\tags\\index.md . There is a method to use MkDocs Macros in Markdown template, but it is quite complicated. Visit the Tags page to see the result. I use Jinja syntax to create the content of the Tags page, therefore, create a new file at overrides\\tags.html and use it as the template for the Tags page: docs\\tags\\index.md The tags.html template to include 2 parts: tag-cloud.html : make a tag cloud to see how many pages are associated with a tag tag-list-pages.html : for each tag, list all pages having that tag to show similar articles together overrides\\tags.html Tags will have random colors, to easily disguise them to each other. A helper random_color() macro that returns a random color looks like: overrides\\partials\\random-colors.html Then it can be imported and used: {% from \"partials/random-colors.html\" import random_color %} <span style=\"color: {{ random_color () }} ;\">tag</span> Tag cloud # The tag cloud shows all tags in different size and color. The bigger a tag is, the more pages mention that tag. Steps to make a tag cloud: Scan all pages and create a list of pairs (tag, pages[]) . Count the number of pages for each tag then show each tag with different text size and color using font-size and color attributes. overrides\\partials\\tag-cloud.html Page list # This section is simple as it just needs to loop through the list of pairs (tag, pages[]) and create a link to each page. Steps to take that: Scan all pages and create a list of pairs (tag, pages[]) . Show each tag with the list of pages in a collapsible <details> block. Only one tag block is open at a time to easily follow the selected tag. To do this, I added a callback of the toggle event on all tag blocks. Whenever a block is opened, this script will close all others. A tag block can be opened via URL with hash being the selected tag. overrides\\partials\\tag-page-list.html Main template # The main.html file, extending the base.html template, will be used for all markdown pages, and it is the starting point to add custom template. To override it, add the main.html file in the overrides folder. Here are things I\u2019m going to do to add more content into a blog post: Extract metadata to get title , description , tags , and other information. Add block to use the Open Graph protocol to show the page\u2019s information when a user shares a page on a social network. Include modified Navigation section to show Tag cloud in either left or right panel. Include modified Page Content which renders the content with additional sections (cover, table of content, main content, comments.). overrides\\main.html Navigation # The sidebar will display the tag cloud based in the page\u2019s table of content. overrides\\partials\\navigation.html Page content # The page content will be placed in the main block. If there is no content, a list of children posts will be shown. overrides\\partials\\post-content.html When printing to a PDF file, the first page should show the post title and its short description. This page is called the cover page which will be created only in printing mode. Create an element with class cover in the post-cover.html template to wrap the cover section. In print mode, this element should cover the full height (100%) of the first paper and align its content vertically. After the line of tags, the updated date will be shown to easily check the latest version of the document: overrides\\partials\\post-cover.html When displaying on a screen, the Table of Content is displayed in the right sidebar. In printed pages, there should be a page to display the table of content too. This page is also only visible in printing. The base Material for MkDocs theme has a partial block for Table of Content section, so I just need to declare it in post-toc.html and include it in the main.html template, between the cover page and the main content. overrides\\partials\\post-toc.html Jinja object It is easy to display an object in Jinja template as Jinja is based on Python. To show all attributes: {{ page.__dict__ }} To show a specific attribute: {{ page.parent.children }} The recent blog posts # There should be a page showing the recent posts to help users see what is new and updated. With the Revision Date plugin, it is able to use two new meta-data fields: git_revision_date_localized , and git_creation_date_localized if the option enable_creation_date is true . Create new index.md file inside the blog folder. When using the Section Index plugin, this index file will be merged to the Blog section, therefore, when user selects the Blog label, there is a list of recent posts will be shown. docs\\blog\\index.md This page will use the blog.html template in which it scans all posts and check the creation date to make a list of posts. Each post should be displayed in a container and be formatted to show the title, the description (at most 250 character using the truncate filter), the creation date, and its tags. Here is the code to sort all pages in order of creation date, and then filter all blog posts to save into the array blog_pages which will be used to generate content. {% set blog_pages =[] %} {% for p in pages | sort ( attribute = 'page.meta.git_revision_date_localized' , reverse = True ) %} {% set pg = p.page %} {# do not list homepage, empty pages, hidden pages #} {% set hidden = true if ( pg.meta and pg.meta.hide and ( 'in_recent_list' in pg.meta.hide )) %} {% if ( not pg.is_homepage ) and ( not pg.markdown == '' ) and ( not hidden ) %} {{ blog_pages.append ( pg ) or \"\" }} {# use \"\" to not add spaces in content #} {% endif %} {% endfor %} Groups of pages # When the number of posts goes bigger, the recent post list becomes longer. It\u2019s time to brake the long list into pages \u2014 the user can click on the page number to see its children posts. This is called \u201cPagination\u201d. How to implement it? Jinja template has the slice filter to divide a list into sub-lists. Here, I\u2019d like to have maximum of 10 posts on each page. {# count the number of pages #} {% set page_num = (blog_pages|count / 10)|round(method='ceil')|int %} < div id = \"page_num\" data-value = \"{{page_num}}\" ></ div > < div class = \"pages\" > {% for pg_group in blog_pages|slice(page_num) %} < div class = \"page\" id = \"page{{ loop.index }}\" > {% for pg in pg_group %} < div class = \"post\" > ... create post layout and content ... </ div > {% endfor %} </ div > {% endfor %} </ div > Post-entry # Each post is wrapped inside a < div class = \"post\" > and its elements are marked with different classes, such as post-title , post-description , etc. for applying styles later. < div class = \"post\" > < h4 class = \"post-title\" > < a href = \"{{ pg.canonical_url }}\" > {{ pg.title }} </ a > </ h4 > < div class = \"post-info\" > < div > < p class = \"post-description\" > {% if pg.meta and pg.meta.description %} {{ pg.meta.description | truncate(200) }} {% endif %} </ p > < div class = \"post-extra row\" > < div class = \"col\" > {% if pg.meta and pg.meta.git_revision_date_localized %} < p class = \"post-date\" > < span > {{ pg.meta.git_revision_date_localized }} </ span > </ p > {% endif %} </ div > < div class = \"col\" > {% if pg.meta and pg.meta.tags %} < p class = \"post-tags\" > {% for tag in pg.meta.tags %} < a class = \"tag\" href = \"{{ config.site_url }}tags/#{{tag}}\" > < span class = \"tag-name\" style = \"color:{{ random_color() }};\" > #{{ tag }} </ span > </ a > {% endfor %} </ p > {% endif %} </ div > </ div > </ div > {% if pg_image %} < img class = \"post-banner \" src = '{{ pg_image }}' /> {% endif %} </ div > </ div > Here is a simple style to make each post display necessary basic information: . md-typeset . post { margin-bottom : 1 rem ; } . md-typeset . post . post-title { margin : 0.25 rem 0 ; text-decoration : none ; font-size : 1.3 em ; } . md-typeset . post . post-info { display : flex ; } . md-typeset . post . post-banner { margin-top : -1 rem ; max-height : 6 rem ; border : 1 px solid lightgray ; } . md-typeset . post . post-description { margin : 0 1 rem 0 0 ; } . md-typeset . post . post-extra { margin : 0.5 rem 1 rem 0 0 ; color : darkgray ; } . md-typeset . post . post-tags { margin : 0 ; text-align : end ; } . md-typeset . post . post-date { margin : 0 ; } Pagination bar # To show the current active page, I use pure CSS and JavaScript. The idea is to use the URL hash to detect which page is activated, such as #page1 . {# pagination #} < div class = \"pages\" > {% for pg_group in blog_pages|slice(page_num) %} < div class = \"page\" id = \"page{{ loop.index }}\" > {% for pg in pg_group %} {% set pg_image = \"\" %} {% if pg.meta and pg.meta.banner %} {% set pg_image = pg.canonical_url ~ pg.meta.banner %} {% endif %} < div class = \"post\" > ... </ div > {% endfor %} </ div > {% endfor %} </ div > < hr > < div class = \"center\" > < div class = \"pagination\" id = \"pagination-bottom\" > <!-- <a href=\"#\">&laquo;</a> --> {% for pg_group in blog_pages|slice(page_num) %} < a class = \"page-number {% if loop.index==1 %}active{% endif%}\" href = \"#page{{ loop.index }}\" > {{ loop.index }} </ a > {% endfor %} <!-- <a href=\"#\">&raquo;</a> --> </ div > </ div > < hr > < p class = \"center\" > Total < b > {{ blog_pages|count }} </ b > posts in {{ page_num }} pages. </ p > Then add some styles to the pagination block and its children links: CSS Styles : Use target keyword to select the selected page ID , then show only the target element. . md-typeset . pages > . page : target ~ . page : last-child , . md-typeset . pages > . page { display : none ; } . md-typeset . pages > : last-child , . md-typeset . pages > . page : target { display : block ; } JavaScript When the page is loaded, a script will run to get all pagination\u2019s links, and then add a callback function for click event, that remove active class from last activated element and then assign active class to the event\u2019s source element. Note that the first page is activated by default when the page is loaded. After a page is selected, function scrollToTop() will navigate to the top view. overrides\\partials\\post-list.html < script > function scrollToTop () { // delay a little for css to calculate windows size setTimeout ( function () { window . scrollTo ( 0 , 0 ); }, 100 ); } function activatePaginationLinks ( name ) { var pagination = document . getElementById ( \"pagination-\" + name ); if ( pagination ) { var links = pagination . getElementsByClassName ( \"page-number\" ); if ( links . length ) { for ( var i = 0 ; i < links . length ; i ++ ) { if ( links [ i ]. getAttribute ( \"href\" ) == window . location . hash ) { links [ i ]. classList . add ( \"active\" ); } else { links [ i ]. classList . remove ( \"active\" ) } } } } } // show page 1 as default window . location . hash = \"#page1\" ; // listen to hash change window . onhashchange = function () { var hash = window . location . hash ; const regexp = /^#page[0-9]+$/ ; if ( regexp . test ( hash )) { var num = parseInt ( hash . substr ( 5 )); var max = parseInt ( document . getElementById ( 'page_num' ). dataset . value ); if ( num >= 1 && num <= max ) { activatePaginationLinks ( \"top\" ); activatePaginationLinks ( \"bottom\" ); scrollToTop (); return ; } } window . location . hash = \"#page1\" ; } < /script> Zoom-in Images # As mentioned in the Images section, view-bigimg library helps to zoom and pan images. It\u2019s useful when the image is in high resolution and resized to fit site\u2019s width. Download view-bigimg.css and view-bigimg.js files from the view-bigimg repo, then add them into the addition assets configs in mkdocs.yml : extra_css : - assets/view-bigimg.css extra_javascript : - assets/view-bigimg.js When click on the image, this library will create a new layer and show the image in a bigger size. However, it must be clicked on the close button to go back to the page\u2019s content. I want to simplify this step by just click on the image. Panning still is activated by press and hold. Therefore, I write a function to detect mousedown and mousemove event, then only close the image if it is a simple click: assets\\extra.js var dragged = false ; document . addEventListener ( \"mousedown\" , () => ( dragged = false )); document . addEventListener ( \"mousemove\" , () => ( dragged = true )); var viewer = new ViewBigimg (); var figures = document . querySelectorAll ( \"img\" ); for ( var i = 0 ; i < figures . length ; i ++ ) { figures [ i ]. onclick = ( e ) => { if ( e . target . nodeName === \"IMG\" ) { viewer . show ( e . target . src ); } }; } var containers = document . querySelectorAll ( \"#iv-container .iv-image-view\" ); for ( var i = 0 ; i < containers . length ; i ++ ) { containers [ i ]. onclick = () => { if ( ! dragged ) { viewer . hide (); } }; } Open external links # When following links, to remain the blog page opened, external links should be shown in new tabs without any tracking information. To do that, I write some lines of code to get all external links in the page, then set target = \"_blank\" and add attribute rel = \"noopener noreferrer\" to them. assets\\extra.js /* open external links in new tab */ var links = document . links ; for ( var i = 0 , linksLength = links . length ; i < linksLength ; i ++ ) { if ( links [ i ]. hostname != window . location . hostname ) { links [ i ]. target = \"_blank\" ; links [ i ]. setAttribute ( \"rel\" , \"noopener noreferrer\" ); links [ i ]. className += \" externalLink\" ; } else { links [ i ]. className += \" localLink\" ; } }","title":"Add Tags, Recent Post and new Features to my Blog site"},{"location":"blog/site-setup/add-new-features/#tags-page","text":"The tag page is the place to list all tags, and list all pages that have a common tag. A new page will be created at docs\\tags\\index.md . There is a method to use MkDocs Macros in Markdown template, but it is quite complicated. Visit the Tags page to see the result. I use Jinja syntax to create the content of the Tags page, therefore, create a new file at overrides\\tags.html and use it as the template for the Tags page: docs\\tags\\index.md The tags.html template to include 2 parts: tag-cloud.html : make a tag cloud to see how many pages are associated with a tag tag-list-pages.html : for each tag, list all pages having that tag to show similar articles together overrides\\tags.html Tags will have random colors, to easily disguise them to each other. A helper random_color() macro that returns a random color looks like: overrides\\partials\\random-colors.html Then it can be imported and used: {% from \"partials/random-colors.html\" import random_color %} <span style=\"color: {{ random_color () }} ;\">tag</span>","title":"Tags page"},{"location":"blog/site-setup/add-new-features/#tag-cloud","text":"The tag cloud shows all tags in different size and color. The bigger a tag is, the more pages mention that tag. Steps to make a tag cloud: Scan all pages and create a list of pairs (tag, pages[]) . Count the number of pages for each tag then show each tag with different text size and color using font-size and color attributes. overrides\\partials\\tag-cloud.html","title":"Tag cloud"},{"location":"blog/site-setup/add-new-features/#page-list","text":"This section is simple as it just needs to loop through the list of pairs (tag, pages[]) and create a link to each page. Steps to take that: Scan all pages and create a list of pairs (tag, pages[]) . Show each tag with the list of pages in a collapsible <details> block. Only one tag block is open at a time to easily follow the selected tag. To do this, I added a callback of the toggle event on all tag blocks. Whenever a block is opened, this script will close all others. A tag block can be opened via URL with hash being the selected tag. overrides\\partials\\tag-page-list.html","title":"Page list"},{"location":"blog/site-setup/add-new-features/#main-template","text":"The main.html file, extending the base.html template, will be used for all markdown pages, and it is the starting point to add custom template. To override it, add the main.html file in the overrides folder. Here are things I\u2019m going to do to add more content into a blog post: Extract metadata to get title , description , tags , and other information. Add block to use the Open Graph protocol to show the page\u2019s information when a user shares a page on a social network. Include modified Navigation section to show Tag cloud in either left or right panel. Include modified Page Content which renders the content with additional sections (cover, table of content, main content, comments.). overrides\\main.html","title":"Main template"},{"location":"blog/site-setup/add-new-features/#navigation","text":"The sidebar will display the tag cloud based in the page\u2019s table of content. overrides\\partials\\navigation.html","title":"Navigation"},{"location":"blog/site-setup/add-new-features/#page-content","text":"The page content will be placed in the main block. If there is no content, a list of children posts will be shown. overrides\\partials\\post-content.html When printing to a PDF file, the first page should show the post title and its short description. This page is called the cover page which will be created only in printing mode. Create an element with class cover in the post-cover.html template to wrap the cover section. In print mode, this element should cover the full height (100%) of the first paper and align its content vertically. After the line of tags, the updated date will be shown to easily check the latest version of the document: overrides\\partials\\post-cover.html When displaying on a screen, the Table of Content is displayed in the right sidebar. In printed pages, there should be a page to display the table of content too. This page is also only visible in printing. The base Material for MkDocs theme has a partial block for Table of Content section, so I just need to declare it in post-toc.html and include it in the main.html template, between the cover page and the main content. overrides\\partials\\post-toc.html Jinja object It is easy to display an object in Jinja template as Jinja is based on Python. To show all attributes: {{ page.__dict__ }} To show a specific attribute: {{ page.parent.children }}","title":"Page content"},{"location":"blog/site-setup/add-new-features/#the-recent-blog-posts","text":"There should be a page showing the recent posts to help users see what is new and updated. With the Revision Date plugin, it is able to use two new meta-data fields: git_revision_date_localized , and git_creation_date_localized if the option enable_creation_date is true . Create new index.md file inside the blog folder. When using the Section Index plugin, this index file will be merged to the Blog section, therefore, when user selects the Blog label, there is a list of recent posts will be shown. docs\\blog\\index.md This page will use the blog.html template in which it scans all posts and check the creation date to make a list of posts. Each post should be displayed in a container and be formatted to show the title, the description (at most 250 character using the truncate filter), the creation date, and its tags. Here is the code to sort all pages in order of creation date, and then filter all blog posts to save into the array blog_pages which will be used to generate content. {% set blog_pages =[] %} {% for p in pages | sort ( attribute = 'page.meta.git_revision_date_localized' , reverse = True ) %} {% set pg = p.page %} {# do not list homepage, empty pages, hidden pages #} {% set hidden = true if ( pg.meta and pg.meta.hide and ( 'in_recent_list' in pg.meta.hide )) %} {% if ( not pg.is_homepage ) and ( not pg.markdown == '' ) and ( not hidden ) %} {{ blog_pages.append ( pg ) or \"\" }} {# use \"\" to not add spaces in content #} {% endif %} {% endfor %}","title":"The recent blog posts"},{"location":"blog/site-setup/add-new-features/#groups-of-pages","text":"When the number of posts goes bigger, the recent post list becomes longer. It\u2019s time to brake the long list into pages \u2014 the user can click on the page number to see its children posts. This is called \u201cPagination\u201d. How to implement it? Jinja template has the slice filter to divide a list into sub-lists. Here, I\u2019d like to have maximum of 10 posts on each page. {# count the number of pages #} {% set page_num = (blog_pages|count / 10)|round(method='ceil')|int %} < div id = \"page_num\" data-value = \"{{page_num}}\" ></ div > < div class = \"pages\" > {% for pg_group in blog_pages|slice(page_num) %} < div class = \"page\" id = \"page{{ loop.index }}\" > {% for pg in pg_group %} < div class = \"post\" > ... create post layout and content ... </ div > {% endfor %} </ div > {% endfor %} </ div >","title":"Groups of pages"},{"location":"blog/site-setup/add-new-features/#post-entry","text":"Each post is wrapped inside a < div class = \"post\" > and its elements are marked with different classes, such as post-title , post-description , etc. for applying styles later. < div class = \"post\" > < h4 class = \"post-title\" > < a href = \"{{ pg.canonical_url }}\" > {{ pg.title }} </ a > </ h4 > < div class = \"post-info\" > < div > < p class = \"post-description\" > {% if pg.meta and pg.meta.description %} {{ pg.meta.description | truncate(200) }} {% endif %} </ p > < div class = \"post-extra row\" > < div class = \"col\" > {% if pg.meta and pg.meta.git_revision_date_localized %} < p class = \"post-date\" > < span > {{ pg.meta.git_revision_date_localized }} </ span > </ p > {% endif %} </ div > < div class = \"col\" > {% if pg.meta and pg.meta.tags %} < p class = \"post-tags\" > {% for tag in pg.meta.tags %} < a class = \"tag\" href = \"{{ config.site_url }}tags/#{{tag}}\" > < span class = \"tag-name\" style = \"color:{{ random_color() }};\" > #{{ tag }} </ span > </ a > {% endfor %} </ p > {% endif %} </ div > </ div > </ div > {% if pg_image %} < img class = \"post-banner \" src = '{{ pg_image }}' /> {% endif %} </ div > </ div > Here is a simple style to make each post display necessary basic information: . md-typeset . post { margin-bottom : 1 rem ; } . md-typeset . post . post-title { margin : 0.25 rem 0 ; text-decoration : none ; font-size : 1.3 em ; } . md-typeset . post . post-info { display : flex ; } . md-typeset . post . post-banner { margin-top : -1 rem ; max-height : 6 rem ; border : 1 px solid lightgray ; } . md-typeset . post . post-description { margin : 0 1 rem 0 0 ; } . md-typeset . post . post-extra { margin : 0.5 rem 1 rem 0 0 ; color : darkgray ; } . md-typeset . post . post-tags { margin : 0 ; text-align : end ; } . md-typeset . post . post-date { margin : 0 ; }","title":"Post-entry"},{"location":"blog/site-setup/add-new-features/#pagination-bar","text":"To show the current active page, I use pure CSS and JavaScript. The idea is to use the URL hash to detect which page is activated, such as #page1 . {# pagination #} < div class = \"pages\" > {% for pg_group in blog_pages|slice(page_num) %} < div class = \"page\" id = \"page{{ loop.index }}\" > {% for pg in pg_group %} {% set pg_image = \"\" %} {% if pg.meta and pg.meta.banner %} {% set pg_image = pg.canonical_url ~ pg.meta.banner %} {% endif %} < div class = \"post\" > ... </ div > {% endfor %} </ div > {% endfor %} </ div > < hr > < div class = \"center\" > < div class = \"pagination\" id = \"pagination-bottom\" > <!-- <a href=\"#\">&laquo;</a> --> {% for pg_group in blog_pages|slice(page_num) %} < a class = \"page-number {% if loop.index==1 %}active{% endif%}\" href = \"#page{{ loop.index }}\" > {{ loop.index }} </ a > {% endfor %} <!-- <a href=\"#\">&raquo;</a> --> </ div > </ div > < hr > < p class = \"center\" > Total < b > {{ blog_pages|count }} </ b > posts in {{ page_num }} pages. </ p > Then add some styles to the pagination block and its children links: CSS Styles : Use target keyword to select the selected page ID , then show only the target element. . md-typeset . pages > . page : target ~ . page : last-child , . md-typeset . pages > . page { display : none ; } . md-typeset . pages > : last-child , . md-typeset . pages > . page : target { display : block ; } JavaScript When the page is loaded, a script will run to get all pagination\u2019s links, and then add a callback function for click event, that remove active class from last activated element and then assign active class to the event\u2019s source element. Note that the first page is activated by default when the page is loaded. After a page is selected, function scrollToTop() will navigate to the top view. overrides\\partials\\post-list.html < script > function scrollToTop () { // delay a little for css to calculate windows size setTimeout ( function () { window . scrollTo ( 0 , 0 ); }, 100 ); } function activatePaginationLinks ( name ) { var pagination = document . getElementById ( \"pagination-\" + name ); if ( pagination ) { var links = pagination . getElementsByClassName ( \"page-number\" ); if ( links . length ) { for ( var i = 0 ; i < links . length ; i ++ ) { if ( links [ i ]. getAttribute ( \"href\" ) == window . location . hash ) { links [ i ]. classList . add ( \"active\" ); } else { links [ i ]. classList . remove ( \"active\" ) } } } } } // show page 1 as default window . location . hash = \"#page1\" ; // listen to hash change window . onhashchange = function () { var hash = window . location . hash ; const regexp = /^#page[0-9]+$/ ; if ( regexp . test ( hash )) { var num = parseInt ( hash . substr ( 5 )); var max = parseInt ( document . getElementById ( 'page_num' ). dataset . value ); if ( num >= 1 && num <= max ) { activatePaginationLinks ( \"top\" ); activatePaginationLinks ( \"bottom\" ); scrollToTop (); return ; } } window . location . hash = \"#page1\" ; } < /script>","title":"Pagination bar"},{"location":"blog/site-setup/add-new-features/#zoom-in-images","text":"As mentioned in the Images section, view-bigimg library helps to zoom and pan images. It\u2019s useful when the image is in high resolution and resized to fit site\u2019s width. Download view-bigimg.css and view-bigimg.js files from the view-bigimg repo, then add them into the addition assets configs in mkdocs.yml : extra_css : - assets/view-bigimg.css extra_javascript : - assets/view-bigimg.js When click on the image, this library will create a new layer and show the image in a bigger size. However, it must be clicked on the close button to go back to the page\u2019s content. I want to simplify this step by just click on the image. Panning still is activated by press and hold. Therefore, I write a function to detect mousedown and mousemove event, then only close the image if it is a simple click: assets\\extra.js var dragged = false ; document . addEventListener ( \"mousedown\" , () => ( dragged = false )); document . addEventListener ( \"mousemove\" , () => ( dragged = true )); var viewer = new ViewBigimg (); var figures = document . querySelectorAll ( \"img\" ); for ( var i = 0 ; i < figures . length ; i ++ ) { figures [ i ]. onclick = ( e ) => { if ( e . target . nodeName === \"IMG\" ) { viewer . show ( e . target . src ); } }; } var containers = document . querySelectorAll ( \"#iv-container .iv-image-view\" ); for ( var i = 0 ; i < containers . length ; i ++ ) { containers [ i ]. onclick = () => { if ( ! dragged ) { viewer . hide (); } }; }","title":"Zoom-in Images"},{"location":"blog/site-setup/add-new-features/#open-external-links","text":"When following links, to remain the blog page opened, external links should be shown in new tabs without any tracking information. To do that, I write some lines of code to get all external links in the page, then set target = \"_blank\" and add attribute rel = \"noopener noreferrer\" to them. assets\\extra.js /* open external links in new tab */ var links = document . links ; for ( var i = 0 , linksLength = links . length ; i < linksLength ; i ++ ) { if ( links [ i ]. hostname != window . location . hostname ) { links [ i ]. target = \"_blank\" ; links [ i ]. setAttribute ( \"rel\" , \"noopener noreferrer\" ); links [ i ]. className += \" externalLink\" ; } else { links [ i ]. className += \" localLink\" ; } }","title":"Open external links"},{"location":"blog/site-setup/create-site-project/","tags":["mkdocs"],"text":"Material for MkDocs # A personal site is usually a static site which has pre-built contents. A static site generator is a tool that generates a full static HTML website based on raw data and a set of templates. Visit the list of Site Generators to see available tools. MkDocs is a fast and simple engine to build a site for project documentation. Content source files are written in Markdown format, and the site is configured with a single YAML config file. Material for MkDocs is a popular theme for MkDocs. It has a simple and clear layout with a bunch of useful features, such as better navigation behaviors, strongly integrated Markdown extensions, and some additional tweaks. This project has a paid version called Insiders , but the free version is perfectly enough for a personal use. Installation # Steps to install and create a new site: Download and install Python 3 . Create a new folder to store the project: mkdir CodeInsideOut cd CodeInsideOut It\u2019s recommended to use a virtual environment to isolate this project with others from a possible package conflict. python -m venv .venv Then activate the virtual environment: Windows Linux .venv\\Scripts\\activate.bat .venv/Scripts/activate Remember to run this command every time you come back to work in this project. Install Material for MkDocs package. Read more at getting started : pip install mkdocs-material Start a new site: mkdocs new . This will create the following file structure: . \u251c\u2500 mkdocs.yml # The configuration file \u2514\u2500 docs/ # Other markdown pages \u251c\u2500 index.md # The documentation homepage \u2514\u2500 ... # Other files Enable Material for MkDocs theme by adding a config into mkdocs.yml : theme : name : material Run a local server, and preview the site at http://localhost:8000 to see the default homepage: mkdocs serve To publish the site, build it first: mkdocs build Then copy all the content in the site folder to the website\u2019s root folder. Working folder # Each Markdown file inside the folder docs will be rendered as a page of the site. The index page is located at docs\\index.md . Sub-folders are used as the path to a group of related posts. If a post is named other than index.md , the filename will be used as the directory path of the generated page. Here is how MkDocs generates URLs for Markdown posts: folder docs becomes the root of the site www.site.com/ file docs\\blog\\post.md becomes the link www.site.com/blog/post/ file docs\\blog\\post\\index.md also becomes the link www.site.com/blog/post/ Use hyphen ( - ) in folder name and file name to create good URLs. Some tips here . Visual Studio Code # Visual Studio Code is a lightweight but powerful source code editor. It well supports users to write code, documents, notes. This editor also have some extensions to turn it into a full-feature IDE. Useful extensions for writing in Markdown format and editing HTML template: Markdown All in One : add keyboard shortcuts, auto-completion, edit and format list and table. Markdown Paste : paste images, links from the clipboard. Prettier \u2014 Code formatter : a formatter which supports a lot of languages. Draw.io Integration : edit diagrams and SVG images. LTeX : Grammar/spell checker using LanguageTool with support for LaTeX, Markdown, and others. Additional extensions: Jinja : highlight Jinja syntax in HTML templates. Sublime Text Key map and Settings Importer : import keybindings and settings. Writing a post using Visual Studio Code Basic Configuration # All configurations are declared in the config file mkdocs.yml at the root of the project folder. Here are some main settings to quickly customize your site: Site Information # Site information consists of the name, the URL, the title, a description and some keywords that are used to get brief information about the content of the site. The copyright word should include a link to the original theme when you use the free version. site_name : Code Inside Out site_url : https://www.codeinsideout.com/ # must have the trailing slash site_author : V\u0169 Quang Tr\u1ecdng (vuquangtrong@gmail.com) site_description : Guides, notes and useful stuff for learning embedded systems. copyright : > # should remain a link to the original theme &copy; 2021 Code Inside Out<br> <a href=\"https://github.com/vuquangtrong/mkdocs-material-blog\">Blog Theme</a> / <a href=\"https://squidfunk.github.io/mkdocs-material/\">Material for MkDocs</a> The social links in the footer can be added in the extra section. extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/vuquangtrong name : vuquangtrong - icon : fontawesome/brands/facebook-f link : https://facebook.com/trongvq name : trongvq - icon : fontawesome/brands/linkedin-in link : https://www.linkedin.com/in/vqtrong name : vqtrong generator : false # hide the line \"Made with Material for MkDocs\" Appearance # The theme can be customized by changing below options: Colors # Changing color is to select colors for 2 main groups: The primary color which is used for the header, the sidebar, text links and several other components. The accent color which is used to denote elements that can be interacted with, e.g. hovered links, buttons and scroll-bars. theme : palette : primary : white accent : deep orange Fonts # Serif fonts 1 are widely used for body text because they are considered to be easier to read than Sans-Serif fonts in print. For better reading, distinguishing the digit zero 0 from the Latin script letter Oh o or O is a way to avoid mistake, especially while reading technical notes. Fonts for source code do have slashed/ dotted/ open zero 2 , but fonts for reading don\u2019t have those styles. It\u2019s also needed to clearly distinguish the digit one 1 with lowercase i , the uppercase I , and the lowercase l . Luckily, they usually do not stand close to each other. To replace the defaults fonts , this site uses Noto Serif for the body text, and Roboto Mono for the code block. theme : font : text : Noto Serif code : Roboto Mono Can you easily read below pairs of characters? Body text: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL Code block: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL Icons # Icons can be selected in built-in icon packs, such as . It can be an image also. theme : icon : logo : fontawesome/solid/code favicon : favicon.png Navigation # A clear and concise navigation structure is an important aspect of good site. The layout will be 3 columns: Site Navigation, Main Content, Table of Content. Some navigation features are applied as below: theme : name : material features : # - navigation.instant # some features may not work properly with XHR - navigation.tracking # the URL changes with the active anchor - navigation.tabs # first top-level sections are shown as tabs # - navigation.tabs.sticky # tabs always show # - navigation.sections # sections are rendered as groups in the sidebar # - navigation.expand # all sections are expanded - navigation.indexes # link an index.md page to a section - navigation.top # show back-to-top button # - toc.integrate # show table of contents to navigation panel # - header.autohide Search # The MkDocs-based sites come with a built-in search engine , which also provides some additional features as below: theme : name : material features : - search.suggest # display the likeliest completion for the last word - search.highlight # highlight all occurrences - search.share # show a share button Content # Some extra features are enabled to render interactive elements. theme : name : material features : - content.code.annotate When Metadata is enabled, the navigation and/or table of contents sidebars can be hidden for a document with custom front matter. --- hide : - navigation - toc - feedback --- Site analytics # Material for MkDocs integrates with both, Google Analytics 4 and the now phasing out Universal Analytics. extra : analytics : provider : google property : G-XXXXXXXXXX or UA-XXXXXXXX-X Customization # Below are ways to customize the theme in terms of adding some extra lines of code. However, this method is quite easy even for beginners who have known some of CSS and JS. Extra assets # Additional assets can be used to add user\u2019s stylesheets and JavaScript files. Those file should be added to the docs directory as below structure: . \u251c\u2500 docs/ \u2502 \u251c\u2500 assets/ \u2502 | \u2514\u2500 extra.css \u2502 | \u2514\u2500 extra.js | \u2514\u2500 blog/ \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml : extra_css : - assets/extra.css extra_javascript : - assets/extra.js Use the Developer mode in your browser to inspect elements and changes their styles as your taste in extra.css . Add extra scripts to extra.js to interact with elements also. Extend the theme # Extending the theme is a way to alter the HTML structure and layout. Create a new folder name overrides beside the docs folder and add below config into mkdocs.yml : theme : name : material custom_dir : overrides The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript files \u2502 \u2514\u2500 stylesheets/ # Style sheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics/ # Analytics integrations \u2502 \u2502 \u2514\u2500 analytics.html # Analytics setup \u2502 \u251c\u2500 languages/ # Translation languages \u2502 \u251c\u2500 content.html # Page content \u2502 \u251c\u2500 copyright.html # Copyright and theme information \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Translation setup \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search interface \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-file.html # Source file information \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page Overriding partials In order to override a partial, we can replace it with a file of the same name and location in the overrides directory. For example, to replace the original footer.html partial, create a new footer.html partial in the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 partials/ \u2502 \u2514\u2500 footer.html \u2514\u2500 mkdocs.yml MkDocs will now use the new partial when rendering the theme. This can be done with any file. Overriding blocks (recommended) Besides overriding partials, it\u2019s also possible to override (and extend) template blocks, which are defined inside the templates and wrap specific features. In order to set up block overrides, create a main.html file inside the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml Then, e.g. to override the site title, add the following lines to main.html: {% extends \"base.html\" %} {% block htmltitle %} <title>Lorem ipsum dolor sit amet</title> {% endblock %} The following template blocks are provided by the theme: analytics # Wraps the Google Analytics integration announce # Wraps the announcement bar config # Wraps the JavaScript application config content # Wraps the main content disqus # Wraps the Disqus integration extrahead # Empty block to add custom meta tags fonts # Wraps the font definitions footer # Wraps the footer with navigation and copyright header # Wraps the fixed header bar hero # Wraps the hero teaser (if available) htmltitle # Wraps the <title> tag libs # Wraps the JavaScript libraries (header) outdated # Wraps the version warning scripts # Wraps the JavaScript application (footer) site_meta # Wraps the meta tags in the document head site_nav # Wraps the site navigation and table of contents styles # Wraps the style sheets (also extra sources) tabs # Wraps the tabs navigation (if available) Comment system # Disqus can be easily integrated into theme by overriding the file post-content.html , and adding disqus section. See full guide here . mkdocs.yml extra : disqus : \"vuquangtrong-github-io\" overrides\\partials\\post-content.html overrides\\partials\\disqus.html https://en.wikipedia.org/wiki/Serif \u21a9 https://en.wikipedia.org/wiki/Slashed_zero \u21a9","title":"A Guide to Create a Personal Site"},{"location":"blog/site-setup/create-site-project/#material-for-mkdocs","text":"A personal site is usually a static site which has pre-built contents. A static site generator is a tool that generates a full static HTML website based on raw data and a set of templates. Visit the list of Site Generators to see available tools. MkDocs is a fast and simple engine to build a site for project documentation. Content source files are written in Markdown format, and the site is configured with a single YAML config file. Material for MkDocs is a popular theme for MkDocs. It has a simple and clear layout with a bunch of useful features, such as better navigation behaviors, strongly integrated Markdown extensions, and some additional tweaks. This project has a paid version called Insiders , but the free version is perfectly enough for a personal use.","title":"Material for MkDocs"},{"location":"blog/site-setup/create-site-project/#installation","text":"Steps to install and create a new site: Download and install Python 3 . Create a new folder to store the project: mkdir CodeInsideOut cd CodeInsideOut It\u2019s recommended to use a virtual environment to isolate this project with others from a possible package conflict. python -m venv .venv Then activate the virtual environment: Windows Linux .venv\\Scripts\\activate.bat .venv/Scripts/activate Remember to run this command every time you come back to work in this project. Install Material for MkDocs package. Read more at getting started : pip install mkdocs-material Start a new site: mkdocs new . This will create the following file structure: . \u251c\u2500 mkdocs.yml # The configuration file \u2514\u2500 docs/ # Other markdown pages \u251c\u2500 index.md # The documentation homepage \u2514\u2500 ... # Other files Enable Material for MkDocs theme by adding a config into mkdocs.yml : theme : name : material Run a local server, and preview the site at http://localhost:8000 to see the default homepage: mkdocs serve To publish the site, build it first: mkdocs build Then copy all the content in the site folder to the website\u2019s root folder.","title":"Installation"},{"location":"blog/site-setup/create-site-project/#working-folder","text":"Each Markdown file inside the folder docs will be rendered as a page of the site. The index page is located at docs\\index.md . Sub-folders are used as the path to a group of related posts. If a post is named other than index.md , the filename will be used as the directory path of the generated page. Here is how MkDocs generates URLs for Markdown posts: folder docs becomes the root of the site www.site.com/ file docs\\blog\\post.md becomes the link www.site.com/blog/post/ file docs\\blog\\post\\index.md also becomes the link www.site.com/blog/post/ Use hyphen ( - ) in folder name and file name to create good URLs. Some tips here .","title":"Working folder"},{"location":"blog/site-setup/create-site-project/#visual-studio-code","text":"Visual Studio Code is a lightweight but powerful source code editor. It well supports users to write code, documents, notes. This editor also have some extensions to turn it into a full-feature IDE. Useful extensions for writing in Markdown format and editing HTML template: Markdown All in One : add keyboard shortcuts, auto-completion, edit and format list and table. Markdown Paste : paste images, links from the clipboard. Prettier \u2014 Code formatter : a formatter which supports a lot of languages. Draw.io Integration : edit diagrams and SVG images. LTeX : Grammar/spell checker using LanguageTool with support for LaTeX, Markdown, and others. Additional extensions: Jinja : highlight Jinja syntax in HTML templates. Sublime Text Key map and Settings Importer : import keybindings and settings. Writing a post using Visual Studio Code","title":"Visual Studio Code"},{"location":"blog/site-setup/create-site-project/#basic-configuration","text":"All configurations are declared in the config file mkdocs.yml at the root of the project folder. Here are some main settings to quickly customize your site:","title":"Basic Configuration"},{"location":"blog/site-setup/create-site-project/#site-information","text":"Site information consists of the name, the URL, the title, a description and some keywords that are used to get brief information about the content of the site. The copyright word should include a link to the original theme when you use the free version. site_name : Code Inside Out site_url : https://www.codeinsideout.com/ # must have the trailing slash site_author : V\u0169 Quang Tr\u1ecdng (vuquangtrong@gmail.com) site_description : Guides, notes and useful stuff for learning embedded systems. copyright : > # should remain a link to the original theme &copy; 2021 Code Inside Out<br> <a href=\"https://github.com/vuquangtrong/mkdocs-material-blog\">Blog Theme</a> / <a href=\"https://squidfunk.github.io/mkdocs-material/\">Material for MkDocs</a> The social links in the footer can be added in the extra section. extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/vuquangtrong name : vuquangtrong - icon : fontawesome/brands/facebook-f link : https://facebook.com/trongvq name : trongvq - icon : fontawesome/brands/linkedin-in link : https://www.linkedin.com/in/vqtrong name : vqtrong generator : false # hide the line \"Made with Material for MkDocs\"","title":"Site Information"},{"location":"blog/site-setup/create-site-project/#appearance","text":"The theme can be customized by changing below options:","title":"Appearance"},{"location":"blog/site-setup/create-site-project/#colors","text":"Changing color is to select colors for 2 main groups: The primary color which is used for the header, the sidebar, text links and several other components. The accent color which is used to denote elements that can be interacted with, e.g. hovered links, buttons and scroll-bars. theme : palette : primary : white accent : deep orange","title":"Colors"},{"location":"blog/site-setup/create-site-project/#fonts","text":"Serif fonts 1 are widely used for body text because they are considered to be easier to read than Sans-Serif fonts in print. For better reading, distinguishing the digit zero 0 from the Latin script letter Oh o or O is a way to avoid mistake, especially while reading technical notes. Fonts for source code do have slashed/ dotted/ open zero 2 , but fonts for reading don\u2019t have those styles. It\u2019s also needed to clearly distinguish the digit one 1 with lowercase i , the uppercase I , and the lowercase l . Luckily, they usually do not stand close to each other. To replace the defaults fonts , this site uses Noto Serif for the body text, and Roboto Mono for the code block. theme : font : text : Noto Serif code : Roboto Mono Can you easily read below pairs of characters? Body text: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL Code block: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL","title":"Fonts"},{"location":"blog/site-setup/create-site-project/#icons","text":"Icons can be selected in built-in icon packs, such as . It can be an image also. theme : icon : logo : fontawesome/solid/code favicon : favicon.png","title":"Icons"},{"location":"blog/site-setup/create-site-project/#navigation","text":"A clear and concise navigation structure is an important aspect of good site. The layout will be 3 columns: Site Navigation, Main Content, Table of Content. Some navigation features are applied as below: theme : name : material features : # - navigation.instant # some features may not work properly with XHR - navigation.tracking # the URL changes with the active anchor - navigation.tabs # first top-level sections are shown as tabs # - navigation.tabs.sticky # tabs always show # - navigation.sections # sections are rendered as groups in the sidebar # - navigation.expand # all sections are expanded - navigation.indexes # link an index.md page to a section - navigation.top # show back-to-top button # - toc.integrate # show table of contents to navigation panel # - header.autohide","title":"Navigation"},{"location":"blog/site-setup/create-site-project/#search","text":"The MkDocs-based sites come with a built-in search engine , which also provides some additional features as below: theme : name : material features : - search.suggest # display the likeliest completion for the last word - search.highlight # highlight all occurrences - search.share # show a share button","title":"Search"},{"location":"blog/site-setup/create-site-project/#content","text":"Some extra features are enabled to render interactive elements. theme : name : material features : - content.code.annotate When Metadata is enabled, the navigation and/or table of contents sidebars can be hidden for a document with custom front matter. --- hide : - navigation - toc - feedback ---","title":"Content"},{"location":"blog/site-setup/create-site-project/#site-analytics","text":"Material for MkDocs integrates with both, Google Analytics 4 and the now phasing out Universal Analytics. extra : analytics : provider : google property : G-XXXXXXXXXX or UA-XXXXXXXX-X","title":"Site analytics"},{"location":"blog/site-setup/create-site-project/#customization","text":"Below are ways to customize the theme in terms of adding some extra lines of code. However, this method is quite easy even for beginners who have known some of CSS and JS.","title":"Customization"},{"location":"blog/site-setup/create-site-project/#extra-assets","text":"Additional assets can be used to add user\u2019s stylesheets and JavaScript files. Those file should be added to the docs directory as below structure: . \u251c\u2500 docs/ \u2502 \u251c\u2500 assets/ \u2502 | \u2514\u2500 extra.css \u2502 | \u2514\u2500 extra.js | \u2514\u2500 blog/ \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml : extra_css : - assets/extra.css extra_javascript : - assets/extra.js Use the Developer mode in your browser to inspect elements and changes their styles as your taste in extra.css . Add extra scripts to extra.js to interact with elements also.","title":"Extra assets"},{"location":"blog/site-setup/create-site-project/#extend-the-theme","text":"Extending the theme is a way to alter the HTML structure and layout. Create a new folder name overrides beside the docs folder and add below config into mkdocs.yml : theme : name : material custom_dir : overrides The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript files \u2502 \u2514\u2500 stylesheets/ # Style sheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics/ # Analytics integrations \u2502 \u2502 \u2514\u2500 analytics.html # Analytics setup \u2502 \u251c\u2500 languages/ # Translation languages \u2502 \u251c\u2500 content.html # Page content \u2502 \u251c\u2500 copyright.html # Copyright and theme information \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Translation setup \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search interface \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-file.html # Source file information \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page Overriding partials In order to override a partial, we can replace it with a file of the same name and location in the overrides directory. For example, to replace the original footer.html partial, create a new footer.html partial in the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 partials/ \u2502 \u2514\u2500 footer.html \u2514\u2500 mkdocs.yml MkDocs will now use the new partial when rendering the theme. This can be done with any file. Overriding blocks (recommended) Besides overriding partials, it\u2019s also possible to override (and extend) template blocks, which are defined inside the templates and wrap specific features. In order to set up block overrides, create a main.html file inside the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml Then, e.g. to override the site title, add the following lines to main.html: {% extends \"base.html\" %} {% block htmltitle %} <title>Lorem ipsum dolor sit amet</title> {% endblock %} The following template blocks are provided by the theme: analytics # Wraps the Google Analytics integration announce # Wraps the announcement bar config # Wraps the JavaScript application config content # Wraps the main content disqus # Wraps the Disqus integration extrahead # Empty block to add custom meta tags fonts # Wraps the font definitions footer # Wraps the footer with navigation and copyright header # Wraps the fixed header bar hero # Wraps the hero teaser (if available) htmltitle # Wraps the <title> tag libs # Wraps the JavaScript libraries (header) outdated # Wraps the version warning scripts # Wraps the JavaScript application (footer) site_meta # Wraps the meta tags in the document head site_nav # Wraps the site navigation and table of contents styles # Wraps the style sheets (also extra sources) tabs # Wraps the tabs navigation (if available)","title":"Extend the theme"},{"location":"blog/site-setup/create-site-project/#comment-system","text":"Disqus can be easily integrated into theme by overriding the file post-content.html , and adding disqus section. See full guide here . mkdocs.yml extra : disqus : \"vuquangtrong-github-io\" overrides\\partials\\post-content.html overrides\\partials\\disqus.html https://en.wikipedia.org/wiki/Serif \u21a9 https://en.wikipedia.org/wiki/Slashed_zero \u21a9","title":"Comment system"},{"location":"blog/site-setup/handle-missing-page/","tags":["javascript"],"text":"The 404 page # Whenever a page is not found in a website, the error 404 is return to the requested users. I need to create this special page to display a short message and guide user to search in this blog. The 404 page should be created in the overrides folder as it will replace the default 404 pages of Material theme. TRY THIS 404 Page Layout and content # Its layout is based on the main.html , and the content is a message displayed in the center of the page. The disqus comment section is removed. The sidebar should not be visible to display message clearly. Search suggestion # I assume that the path of URL contains keywords of what users are looking for. Therefore, after getting the requested URL from window.location.pathname , I will try to open a search form filled with those keywords. JavaScript is helpful here. The sequence of handling is as below: Show 404 message and wait for 5 seconds Open search form Get URL path name, and spit it into keywords For each keyword, fill it into input form Fire events (value changed, element focused) to trigger search engine Delay using Asynchronous function Looking up result may take some time to return, therefore, async function is used to wait for the data. Source code # overrides\\404.html","title":"Hanlde Page Not Found (404) error"},{"location":"blog/site-setup/handle-missing-page/#the-404-page","text":"Whenever a page is not found in a website, the error 404 is return to the requested users. I need to create this special page to display a short message and guide user to search in this blog. The 404 page should be created in the overrides folder as it will replace the default 404 pages of Material theme. TRY THIS 404 Page","title":"The 404 page"},{"location":"blog/site-setup/handle-missing-page/#layout-and-content","text":"Its layout is based on the main.html , and the content is a message displayed in the center of the page. The disqus comment section is removed. The sidebar should not be visible to display message clearly.","title":"Layout and content"},{"location":"blog/site-setup/handle-missing-page/#search-suggestion","text":"I assume that the path of URL contains keywords of what users are looking for. Therefore, after getting the requested URL from window.location.pathname , I will try to open a search form filled with those keywords. JavaScript is helpful here. The sequence of handling is as below: Show 404 message and wait for 5 seconds Open search form Get URL path name, and spit it into keywords For each keyword, fill it into input form Fire events (value changed, element focused) to trigger search engine Delay using Asynchronous function Looking up result may take some time to return, therefore, async function is used to wait for the data.","title":"Search suggestion"},{"location":"blog/site-setup/handle-missing-page/#source-code","text":"overrides\\404.html","title":"Source code"},{"location":"blog/site-setup/markdown-syntax/","tags":["markdown"],"text":"For basic markdown syntax, refer to Markdown Guide Meta-data # The Meta-Data extension adds a syntax for defining meta-data of a document. It is inspired by and follows the syntax of MultiMarkdown . Meta-data is the additional information that can be used to briefly describe the content of a post, such as the title, the short description, tags, and sometimes the banner image. I prefer YAML format : --- title : The page title description : The summary of the page content --- The meta-data can be used in the template and the page content 1 . In Jinja syntax, each page is represented as a page object, then the meta-data field {{ page.meta.title }} will be replaced by the string The page title . Code highlighting # Below extensions are extremely useful for showing code blocks by adding colors, and decoration. Inline code # The InlineHilite is an inline code highlighter inspired by CodeHilite . Borrowing from CodeHilite\u2019s existing syntax, InlineHilite utilizes the following syntax to insert inline highlighted code: `:::language my code` or `#!language my code` . This will render this line `#!python [x for x in range(1, 10) if x % 2]` to a fully colored inline Python code: [ x for x in range ( 1 , 10 ) if x % 2 ] . Code blocks # The Code blocks plugin provides a number of features including allowing the nesting of fences, and ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Highlighting can be further controlled via the Highlight extension . The standard format which supports to add id , class , or custom attribute key=value is as below: ``` { .language #id .class key=\"value\" } content ``` Some special attributes key=value are as below: title = \"abc\" creates a title for the block, used to show the filename or the purpose. linenums = \"n\" creates line numbers starting from n . hl_lines = \"x y-z\" highlights the x -th line and lines in the range from y -th to z -th. Line numbers are always referenced starting at 1 ignoring what the line number is started labeling at the number set by the option linenums = \"n\" . Example: ``` cpp title=\"main.c\" linenums=\"2\" hl_lines=\"1 4-5\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` Result: main.c #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } Code annotations # Code annotation is a unique feature of Material theme which offers a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in // ... and /* ... */ , for YAML in # ... , etc. Example: ``` cpp int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` 1. Need including\\ `#!cpp #include <stdio.h>` Result: Click on to show the annotation. int main ( void ) { printf ( \"Hello world! \\n \" ); // (1) return 0 ; } Need including #include <stdio.h> Admonitions # Admonitions , also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Marked blocks # These types of blocks show an icon to help readers notice the kind of content, such as additional information , caution , or error . Example: !!! info \"The title of the block\" The content can contain formatted text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam sagittis ante blandit diam accumsan scelerisque. - Lorem ipsum dolor sit amet - Lorem ipsum dolor sit amet ``` cpp int main(void) { return 0; } ``` Result: The title of the block The content can contain formatted text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam sagittis ante blandit diam accumsan scelerisque. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet int main ( void ) { return 0 ; } To remove the title but keep the icon, use a space: !!! hint \" \" Need some CSS styles to adjust content block of admonitions. Result: Need some CSS styles to adjust content block of admonitions. Supported types # abstract, summary, tldr info, todo tip, hint, important success, check, done question, help, faq tag warning, caution, attention failure, fail, missing danger, error bug example quote, cite Collapsible blocks # When Details is enabled and an admonition block is started with ??? instead of !!!, the admonition is rendered as a collapsible block with a small toggle on the right side. Use plus ( + ) sign to make it expanded by default. Example: ???+ quote \"Expandable\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Expandable Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. MathJax # MathJax is a beautiful and accessible way to display mathematical content in the browser, adds support for mathematical typesetting in different notations (e.g. LaTeX , MathML , AsciiMath ). Block syntax # Blocks must be enclosed in $$...$$ or \\[...\\] on separate lines: Example: $$ \\operatorname {ker} f = \\{ g \\in G:f ( g )= e_{H} \\} { \\mbox {.}} $$ Result: \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] Inline syntax # Inline blocks must be enclosed in $...$ or \\(...\\) : Example: The homomorphism $ f $ is injective if and only if its kernel is only the singleton set $ e_G $ , because otherwise $ \\exists a,b \\in G $ with $ a \\neq b $ such that $ f ( a )= f ( b ) $ . Result: The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b \\in G\\) with \\(a \\neq b\\) such that \\(f(a)=f(b)\\) . Formatting # Beside Italic , Bold , Italic and Bold , here are some more syntax to format texts. Caret # Caret optionally adds two different features which are syntactically built around the ^ character. The double carets ^^ inserts <ins></ins> tags, and the single caret ^ inserts <sup></sup> tags. Example: The ^^mass-energy^^ equivalence: E=m*c^2^. Result: The mass-energy equivalence: E=m*c 2 . Mark # Mark adds the ability to insert <mark></mark> tags. The syntax requires the text to be surrounded by double equal signs == . Example: ==mark me== and ==mark==me==all==. Result: mark me and mark==me==all . Tildes # Tildes optionally adds two different features which are syntactically built around the ~ character. Add Deletion by using double tildes ~~ which inserts <del></del> tags and Add Subscript by using single tilde ~ which inserts <sub></sub> tags. Example: ~~Remove~~ the existence of CH~3~CH~2~OH. Result: Remove the existence of CH 3 CH 2 OH. Critic # Critic is an extension that adds handling and support of Critic Markup which uses a special syntax to represent edits to a Markdown document. This extension runs before all other extensions to parse the critic edits. Critic Markup uses special markup to insert, delete, substitute, highlight, and comment. Example: To insert or remove text, use {\u200b++insert me++} and {\u200b--remove me--}.\\ Denote a substitution with {\u200b~~that ~> this one~~}. Highlight specific text with {\u200b==highlight me==}.\\ Or even add {\u200b>>a comment<<}. Result: To insert or remove text, use insert me and remove me . Denote a substitution with that this one . Highlight specific text with highlight me . Or even add a comment . Lists # This element allows to group a set of related items in lists. Children items can be numbered in ordered list, or even can have inline checkbox. Ordered list # 1. Ordered item 1 1. Child 1 2. Child 2 2. Ordered item 2 Ordered item 1 Child 1 Child 2 Ordered item 2 Unordered list # - Unordered item 1 - Child 1 - Child 2 - Unordered item 2 Unordered item 1 Child 1 Child 2 Unordered item 2 Task list # - [x] item 1 - [x] item a - [ ] item b - [ ] item 2 item 1 item a item b item 2 Definition # Roses : are red Violets : are blue Roses are red Violets are blue Images # There are some extensions to add a caption to an image. After testing, markdown-captions is a good one that uses the alternate text to make caption, accepts markdown in the alternate text. ![ A photo from <https://picsum.photos> ]( https://picsum.photos/320/240 ) A photo from https://picsum.photos Some images have big size that does not show the detail, therefore, it\u2019s better to zoom in by clicking on them, and pan the image on the screen. The view-bigimg library can do that requirement well. Tabs # Tabbed extension provides a syntax to easily add tabbed Markdown content. Tabs start with === to signify a tab followed by a quoted title. Consecutive tabs are grouped into a tab set. Example: === \"Tab 1\" Some texts === \"Tab A\" Text A === \"Tab B\" Text B === \"Tab 2\" Some other texts Result: Tab 1 Tab 2 Some texts Tab A Tab B Text A Text B Some other texts Tables # Markdown Tables are written in pipe-line format: row is on one line, cell is inline text only. The 1 st line contains the column headers. The 2 nd line is to control text alignment in a column: :--- , :---: and ---: are left, center, and right alignment. Styles for table need to change a little to show cell border. Example: | Syntax | Description | Test Text | | :--------- | :----------: | ----------: | | Left align | Center align | Right align | | A text | Another text | More texts | Result: Syntax Description Test Text Left align Center align Right align A text Another text More texts Icons & Emojis # The Emoji extension adds support for inserting emoji via simple short names enclosed within colons :short_name: . This is accomplished by using a short name index to map easy-to-remember names to the corresponding emoji characters. Emojis # Emojis can be written by putting the short-code of the emoji between two colons. Look up the short-codes at Emojipedia . :smile: , and :heart: Icons # Icons can be used similarly to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the .icons directory, and replacing / with - . E.g. The short-code :material-account-circle: will be converted to an SVG image element with the path .icons/material/account-circle.svg which eventually shows the icon on the webpage. Using include function of Jinja to add an icon wrapped in a twemoji class, e.g. to show : < span class = \"twemoji\" > {% include \".icons/fontawesome/brands/twitter.svg\" %} </ span > Escape All # The Escape All extension makes the backslash \\ character escape everything after it, except things in code blocks of any kind. There are two special escapes among all of these escapes though: escaping space characters and escaping newline characters: Enable nbsp to convert an escaped space into a non-breaking space: &nbsp; . Enable hardbreak to convert an escaped newline to a hard break <br> . The advantage of hard break is that the backslash is visually seen in the document, opposed to the Markdown\u2019s default method of two spaces at the end of a line. Special characters # The Smarty Pants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents. Syntax Render 'single quote' \u2018single quote\u2019 \"double quote\" \u201cdouble quote\u201d <<angle quote>> \u00abangle quote\u00bb ellipses ... ellipses \u2026 N-dash -- N-dash \u2013 M-dash --- M-dash \u2013 The Smart Symbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc. Syntax Render trademark (tm) trademark \u2122 copyright (c) copyright \u00a9 registered (r) registered \u00ae in care of c/o in care of \u2105 plus or minus +/- plus or minus \u00b1 arrows --> <-- <--> arrows \u2192 \u2190 \u2194 not equal =/= not equal \u2260 fractions 1/4 2/3 fractions \u00bc \u2154 ordinal numbers 1st 2nd 3rd 4th 5th ordinal numbers 1 st 2 nd 3 rd 4 th 5 th Not all fractions can be displayed. To render fractions in a better format, use MathJax with inline format. Such as $1 \\over 4$ \u2192 \\(1 \\over 4\\) , or $2 \\over 3$ \u2192 \\(2 \\over 3\\) . Footnotes # The Footnotes extension adds syntax for defining footnotes in Markdown documents. Example: Footnotes[^fn] have a label[^lb] and the footnote's content. [ ^fn ]: This is a footnote content. [ ^lb ]: A footnote on the label `lb`. Result: Footnotes 2 have a label 3 and the footnote\u2019s content. Use mkdocs-macros plugin to use Jinja template directly in the Markdown content. \u21a9 This is a footnote content. \u21a9 A footnote on the label lb . \u21a9","title":"Syntaxes for Writing Markdown Documents"},{"location":"blog/site-setup/markdown-syntax/#meta-data","text":"The Meta-Data extension adds a syntax for defining meta-data of a document. It is inspired by and follows the syntax of MultiMarkdown . Meta-data is the additional information that can be used to briefly describe the content of a post, such as the title, the short description, tags, and sometimes the banner image. I prefer YAML format : --- title : The page title description : The summary of the page content --- The meta-data can be used in the template and the page content 1 . In Jinja syntax, each page is represented as a page object, then the meta-data field {{ page.meta.title }} will be replaced by the string The page title .","title":"Meta-data"},{"location":"blog/site-setup/markdown-syntax/#code-highlighting","text":"Below extensions are extremely useful for showing code blocks by adding colors, and decoration.","title":"Code highlighting"},{"location":"blog/site-setup/markdown-syntax/#inline-code","text":"The InlineHilite is an inline code highlighter inspired by CodeHilite . Borrowing from CodeHilite\u2019s existing syntax, InlineHilite utilizes the following syntax to insert inline highlighted code: `:::language my code` or `#!language my code` . This will render this line `#!python [x for x in range(1, 10) if x % 2]` to a fully colored inline Python code: [ x for x in range ( 1 , 10 ) if x % 2 ] .","title":"Inline code"},{"location":"blog/site-setup/markdown-syntax/#code-blocks","text":"The Code blocks plugin provides a number of features including allowing the nesting of fences, and ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Highlighting can be further controlled via the Highlight extension . The standard format which supports to add id , class , or custom attribute key=value is as below: ``` { .language #id .class key=\"value\" } content ``` Some special attributes key=value are as below: title = \"abc\" creates a title for the block, used to show the filename or the purpose. linenums = \"n\" creates line numbers starting from n . hl_lines = \"x y-z\" highlights the x -th line and lines in the range from y -th to z -th. Line numbers are always referenced starting at 1 ignoring what the line number is started labeling at the number set by the option linenums = \"n\" . Example: ``` cpp title=\"main.c\" linenums=\"2\" hl_lines=\"1 4-5\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` Result: main.c #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; }","title":"Code blocks"},{"location":"blog/site-setup/markdown-syntax/#code-annotations","text":"Code annotation is a unique feature of Material theme which offers a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in // ... and /* ... */ , for YAML in # ... , etc. Example: ``` cpp int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` 1. Need including\\ `#!cpp #include <stdio.h>` Result: Click on to show the annotation. int main ( void ) { printf ( \"Hello world! \\n \" ); // (1) return 0 ; } Need including #include <stdio.h>","title":"Code annotations"},{"location":"blog/site-setup/markdown-syntax/#admonitions","text":"Admonitions , also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow.","title":"Admonitions"},{"location":"blog/site-setup/markdown-syntax/#marked-blocks","text":"These types of blocks show an icon to help readers notice the kind of content, such as additional information , caution , or error . Example: !!! info \"The title of the block\" The content can contain formatted text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam sagittis ante blandit diam accumsan scelerisque. - Lorem ipsum dolor sit amet - Lorem ipsum dolor sit amet ``` cpp int main(void) { return 0; } ``` Result: The title of the block The content can contain formatted text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam sagittis ante blandit diam accumsan scelerisque. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet int main ( void ) { return 0 ; } To remove the title but keep the icon, use a space: !!! hint \" \" Need some CSS styles to adjust content block of admonitions. Result: Need some CSS styles to adjust content block of admonitions.","title":"Marked blocks"},{"location":"blog/site-setup/markdown-syntax/#supported-types","text":"abstract, summary, tldr info, todo tip, hint, important success, check, done question, help, faq tag warning, caution, attention failure, fail, missing danger, error bug example quote, cite","title":"Supported types"},{"location":"blog/site-setup/markdown-syntax/#collapsible-blocks","text":"When Details is enabled and an admonition block is started with ??? instead of !!!, the admonition is rendered as a collapsible block with a small toggle on the right side. Use plus ( + ) sign to make it expanded by default. Example: ???+ quote \"Expandable\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Expandable Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Collapsible blocks"},{"location":"blog/site-setup/markdown-syntax/#mathjax","text":"MathJax is a beautiful and accessible way to display mathematical content in the browser, adds support for mathematical typesetting in different notations (e.g. LaTeX , MathML , AsciiMath ).","title":"MathJax"},{"location":"blog/site-setup/markdown-syntax/#block-syntax","text":"Blocks must be enclosed in $$...$$ or \\[...\\] on separate lines: Example: $$ \\operatorname {ker} f = \\{ g \\in G:f ( g )= e_{H} \\} { \\mbox {.}} $$ Result: \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]","title":"Block syntax"},{"location":"blog/site-setup/markdown-syntax/#inline-syntax","text":"Inline blocks must be enclosed in $...$ or \\(...\\) : Example: The homomorphism $ f $ is injective if and only if its kernel is only the singleton set $ e_G $ , because otherwise $ \\exists a,b \\in G $ with $ a \\neq b $ such that $ f ( a )= f ( b ) $ . Result: The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b \\in G\\) with \\(a \\neq b\\) such that \\(f(a)=f(b)\\) .","title":"Inline syntax"},{"location":"blog/site-setup/markdown-syntax/#formatting","text":"Beside Italic , Bold , Italic and Bold , here are some more syntax to format texts.","title":"Formatting"},{"location":"blog/site-setup/markdown-syntax/#caret","text":"Caret optionally adds two different features which are syntactically built around the ^ character. The double carets ^^ inserts <ins></ins> tags, and the single caret ^ inserts <sup></sup> tags. Example: The ^^mass-energy^^ equivalence: E=m*c^2^. Result: The mass-energy equivalence: E=m*c 2 .","title":"Caret"},{"location":"blog/site-setup/markdown-syntax/#mark","text":"Mark adds the ability to insert <mark></mark> tags. The syntax requires the text to be surrounded by double equal signs == . Example: ==mark me== and ==mark==me==all==. Result: mark me and mark==me==all .","title":"Mark"},{"location":"blog/site-setup/markdown-syntax/#tildes","text":"Tildes optionally adds two different features which are syntactically built around the ~ character. Add Deletion by using double tildes ~~ which inserts <del></del> tags and Add Subscript by using single tilde ~ which inserts <sub></sub> tags. Example: ~~Remove~~ the existence of CH~3~CH~2~OH. Result: Remove the existence of CH 3 CH 2 OH.","title":"Tildes"},{"location":"blog/site-setup/markdown-syntax/#critic","text":"Critic is an extension that adds handling and support of Critic Markup which uses a special syntax to represent edits to a Markdown document. This extension runs before all other extensions to parse the critic edits. Critic Markup uses special markup to insert, delete, substitute, highlight, and comment. Example: To insert or remove text, use {\u200b++insert me++} and {\u200b--remove me--}.\\ Denote a substitution with {\u200b~~that ~> this one~~}. Highlight specific text with {\u200b==highlight me==}.\\ Or even add {\u200b>>a comment<<}. Result: To insert or remove text, use insert me and remove me . Denote a substitution with that this one . Highlight specific text with highlight me . Or even add a comment .","title":"Critic"},{"location":"blog/site-setup/markdown-syntax/#lists","text":"This element allows to group a set of related items in lists. Children items can be numbered in ordered list, or even can have inline checkbox.","title":"Lists"},{"location":"blog/site-setup/markdown-syntax/#ordered-list","text":"1. Ordered item 1 1. Child 1 2. Child 2 2. Ordered item 2 Ordered item 1 Child 1 Child 2 Ordered item 2","title":"Ordered list"},{"location":"blog/site-setup/markdown-syntax/#unordered-list","text":"- Unordered item 1 - Child 1 - Child 2 - Unordered item 2 Unordered item 1 Child 1 Child 2 Unordered item 2","title":"Unordered list"},{"location":"blog/site-setup/markdown-syntax/#task-list","text":"- [x] item 1 - [x] item a - [ ] item b - [ ] item 2 item 1 item a item b item 2","title":"Task list"},{"location":"blog/site-setup/markdown-syntax/#definition","text":"Roses : are red Violets : are blue Roses are red Violets are blue","title":"Definition"},{"location":"blog/site-setup/markdown-syntax/#images","text":"There are some extensions to add a caption to an image. After testing, markdown-captions is a good one that uses the alternate text to make caption, accepts markdown in the alternate text. ![ A photo from <https://picsum.photos> ]( https://picsum.photos/320/240 ) A photo from https://picsum.photos Some images have big size that does not show the detail, therefore, it\u2019s better to zoom in by clicking on them, and pan the image on the screen. The view-bigimg library can do that requirement well.","title":"Images"},{"location":"blog/site-setup/markdown-syntax/#tabs","text":"Tabbed extension provides a syntax to easily add tabbed Markdown content. Tabs start with === to signify a tab followed by a quoted title. Consecutive tabs are grouped into a tab set. Example: === \"Tab 1\" Some texts === \"Tab A\" Text A === \"Tab B\" Text B === \"Tab 2\" Some other texts Result: Tab 1 Tab 2 Some texts Tab A Tab B Text A Text B Some other texts","title":"Tabs"},{"location":"blog/site-setup/markdown-syntax/#tables","text":"Markdown Tables are written in pipe-line format: row is on one line, cell is inline text only. The 1 st line contains the column headers. The 2 nd line is to control text alignment in a column: :--- , :---: and ---: are left, center, and right alignment. Styles for table need to change a little to show cell border. Example: | Syntax | Description | Test Text | | :--------- | :----------: | ----------: | | Left align | Center align | Right align | | A text | Another text | More texts | Result: Syntax Description Test Text Left align Center align Right align A text Another text More texts","title":"Tables"},{"location":"blog/site-setup/markdown-syntax/#icons--emojis","text":"The Emoji extension adds support for inserting emoji via simple short names enclosed within colons :short_name: . This is accomplished by using a short name index to map easy-to-remember names to the corresponding emoji characters.","title":"Icons &amp; Emojis"},{"location":"blog/site-setup/markdown-syntax/#emojis","text":"Emojis can be written by putting the short-code of the emoji between two colons. Look up the short-codes at Emojipedia . :smile: , and :heart:","title":"Emojis"},{"location":"blog/site-setup/markdown-syntax/#icons","text":"Icons can be used similarly to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the .icons directory, and replacing / with - . E.g. The short-code :material-account-circle: will be converted to an SVG image element with the path .icons/material/account-circle.svg which eventually shows the icon on the webpage. Using include function of Jinja to add an icon wrapped in a twemoji class, e.g. to show : < span class = \"twemoji\" > {% include \".icons/fontawesome/brands/twitter.svg\" %} </ span >","title":"Icons"},{"location":"blog/site-setup/markdown-syntax/#escape-all","text":"The Escape All extension makes the backslash \\ character escape everything after it, except things in code blocks of any kind. There are two special escapes among all of these escapes though: escaping space characters and escaping newline characters: Enable nbsp to convert an escaped space into a non-breaking space: &nbsp; . Enable hardbreak to convert an escaped newline to a hard break <br> . The advantage of hard break is that the backslash is visually seen in the document, opposed to the Markdown\u2019s default method of two spaces at the end of a line.","title":"Escape All"},{"location":"blog/site-setup/markdown-syntax/#special-characters","text":"The Smarty Pants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents. Syntax Render 'single quote' \u2018single quote\u2019 \"double quote\" \u201cdouble quote\u201d <<angle quote>> \u00abangle quote\u00bb ellipses ... ellipses \u2026 N-dash -- N-dash \u2013 M-dash --- M-dash \u2013 The Smart Symbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc. Syntax Render trademark (tm) trademark \u2122 copyright (c) copyright \u00a9 registered (r) registered \u00ae in care of c/o in care of \u2105 plus or minus +/- plus or minus \u00b1 arrows --> <-- <--> arrows \u2192 \u2190 \u2194 not equal =/= not equal \u2260 fractions 1/4 2/3 fractions \u00bc \u2154 ordinal numbers 1st 2nd 3rd 4th 5th ordinal numbers 1 st 2 nd 3 rd 4 th 5 th Not all fractions can be displayed. To render fractions in a better format, use MathJax with inline format. Such as $1 \\over 4$ \u2192 \\(1 \\over 4\\) , or $2 \\over 3$ \u2192 \\(2 \\over 3\\) .","title":"Special characters"},{"location":"blog/site-setup/markdown-syntax/#footnotes","text":"The Footnotes extension adds syntax for defining footnotes in Markdown documents. Example: Footnotes[^fn] have a label[^lb] and the footnote's content. [ ^fn ]: This is a footnote content. [ ^lb ]: A footnote on the label `lb`. Result: Footnotes 2 have a label 3 and the footnote\u2019s content. Use mkdocs-macros plugin to use Jinja template directly in the Markdown content. \u21a9 This is a footnote content. \u21a9 A footnote on the label lb . \u21a9","title":"Footnotes"},{"location":"blog/site-setup/mkdocs-plugins/","tags":["mkdocs"],"text":"Places to get MkDocs Plugins: Official List , Wheelodex , and GitHub . Awesome Pages # MkDocs Awesome Pages plugin simplifies configuring page titles and their entries order. Install the plugin: pip install -U mkdocs-awesome-pages-plugin Enable it in the config file mkdocs.yml : plugins : - search # built-in search must be always activated - awesome-pages Create a YAML file named .pages in a directory and use a local nav attribute to customize the navigation in each folder with some more extra configurations: A 3-dots ... entry is used to specify where all remaining items should be inserted. It can filter the remaining items using glob patterns or regular expressions. For example: The pattern is checked against the basename of remaining items - not their whole path, so it can be used to filter files in sub-folders. Hide directory by setting the hide attribute to true . Optionally set the directory title using the title attribute. Optionally specify a title for the navigation entry before its document path. For example: Collapse single nested pages by setting collapse_single_pages attribute to true . Example: .pages title : New section nav : - ... | introduction-*.md - ... - summary.md - First page : page1.md - Link Title : https://example.com hide : false collapse_single_pages : false Using Awesome Pages plugin with collapse_single_pages enabled, before and after applying Section index # This plugin is no longer used in this site! The feature navigation.indexes comes with Material theme already does the work of this plugin. In MkDocs, each directory will become a section, and by default, section only contains its children pages. There is no page associated to a section. MkDocs Section Index is a plugin that attaches the first child page, usually an index page, to the section link. Install the plugin: pip install -U mkdocs-section-index Enable it in the config file mkdocs.yml : plugins : - search # built-in search must be always activated - awesome-pages - section-index # must be after awesome-pages # (1) Note that the feature navigation.indexes comes with Material theme already to the work of this plugin. The merged section page shows the section\u2019s title from the directory name , not the attached page\u2019s title. Using the Section Index plugin, before and after applying Revision date # To keep tracking the last modified date of a post, git-revision-date plugin can be used. A better alternative plugin is git-revision-date-localized which provides more types of date format (e.g. in time-ago format), and the creation date. Install the plugin: pip install -U mkdocs-git-revision-date-localized-plugin Enable it in the config file: plugins : - search # built-in search must be always activated - git-revision-date-localized : enable_creation_date : true type : iso_date This plugin creates new field in the post\u2019s meta-data which content the creation and update date. This information is used to sort the posts by revision date to get recently updated items, as shown in the Recent blog posts page. Print to PDF # Enabling this plugin causes very long build time when you have lot of posts! To export the posts on this blog, there are some plugins which can do it. However, most of them depend on Weasy Print which in turn depends on many other packages. There is one plugin that prints in an easy and simple way: use browser to print page by sending print command (like press Ctrl + S ). More detail of installation and configuration the MkDocs PDF with JS plugin for printing to PDF can be read in Print to PDF . Macros # This plugin is no longer used in this site! MkDocs Macros is a plugin/ framework that makes it easy to produce richer and more beautiful pages. It can do two things: Transform the markdown pages into a Jinja2 templates that can use variables, macros and filters. Replace MkDocs plugins for a wide range of tasks: e.g. manipulating the navigation, adding files after the HTML pages have already been generated etc. Install the plugin: pip install -U mkdocs-macros-plugin Enable it in the config file: plugins : - search # built-in search must be always activated - macros Incomplete data in macro The macro {{ navigation.pages }} contains a list of all pages, but the data of each page maybe not complete, such as title or meta-data . This issue happens when rendering a the content of the first page, but it needs to know the content of the second page which has not been parsed already as it is waiting for the first page getting done. DrawIO Exporter # This plugin is no longer used in this site! DrawIO Exporter is a great plugin that exports the .drawio diagrams to images at build time and insert them to the document. This plugin can replace the Mermaid plugin, and it is faster thanks to no JavaScript needed at runtime. It also helps to enable instant navigation mode of the Material theme. Install the plugin: pip install -U mkdocs-drawio-exporter Enable it in the config file: plugins : - search # built-in search must be always activated - drawio-exporter To create end edit .drawio diagram, download and install the diagrams.net application. To import a diagram, just use the syntax for inserting an image: ![ My alt text ]( my-diagram.drawio ) The plugin will generate an SVG image to a cache folder (default in docs\\drawio-exporter ), and then modify the image\u2019s source to point to the generated image. If the diagram is a multipage document, append the index of the page as an anchor in the image\u2019s URL to select the target page: ![ Page 1 ]( my-diagram.drawio#0 ) A draw.io diagram Alternative method Using Draw.io Integration extension in Visual Studio Code, I can save a DrawIO diagram as a .drawio.svg file, then use that file directly in the page as an usual image. However this method will not support multiple pages in the drawing: ![ My alt text ]( my-diagram.drawio.svg ) // work ![ My alt text ]( my-diagram.drawio.svg#1 ) // does not work Mermaid # This plugin is no longer used in this site! MkDocs Mermaid2 is a plugin to render textual graph description into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.). Install the plugin: pip install -U mkdocs-mermaid2-plugin Enable it in the config file: plugins : - search # built-in search must be always activated - mermaid2 And configure the code block parser for mermaid2 blocks: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:mermaid2.fence_mermaid Example: ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` will render as: A diagram generated by Mermaid","title":"Additional Features using MkDocs Plugins"},{"location":"blog/site-setup/mkdocs-plugins/#awesome-pages","text":"MkDocs Awesome Pages plugin simplifies configuring page titles and their entries order. Install the plugin: pip install -U mkdocs-awesome-pages-plugin Enable it in the config file mkdocs.yml : plugins : - search # built-in search must be always activated - awesome-pages Create a YAML file named .pages in a directory and use a local nav attribute to customize the navigation in each folder with some more extra configurations: A 3-dots ... entry is used to specify where all remaining items should be inserted. It can filter the remaining items using glob patterns or regular expressions. For example: The pattern is checked against the basename of remaining items - not their whole path, so it can be used to filter files in sub-folders. Hide directory by setting the hide attribute to true . Optionally set the directory title using the title attribute. Optionally specify a title for the navigation entry before its document path. For example: Collapse single nested pages by setting collapse_single_pages attribute to true . Example: .pages title : New section nav : - ... | introduction-*.md - ... - summary.md - First page : page1.md - Link Title : https://example.com hide : false collapse_single_pages : false Using Awesome Pages plugin with collapse_single_pages enabled, before and after applying","title":"Awesome Pages"},{"location":"blog/site-setup/mkdocs-plugins/#section-index","text":"This plugin is no longer used in this site! The feature navigation.indexes comes with Material theme already does the work of this plugin. In MkDocs, each directory will become a section, and by default, section only contains its children pages. There is no page associated to a section. MkDocs Section Index is a plugin that attaches the first child page, usually an index page, to the section link. Install the plugin: pip install -U mkdocs-section-index Enable it in the config file mkdocs.yml : plugins : - search # built-in search must be always activated - awesome-pages - section-index # must be after awesome-pages # (1) Note that the feature navigation.indexes comes with Material theme already to the work of this plugin. The merged section page shows the section\u2019s title from the directory name , not the attached page\u2019s title. Using the Section Index plugin, before and after applying","title":"Section index"},{"location":"blog/site-setup/mkdocs-plugins/#revision-date","text":"To keep tracking the last modified date of a post, git-revision-date plugin can be used. A better alternative plugin is git-revision-date-localized which provides more types of date format (e.g. in time-ago format), and the creation date. Install the plugin: pip install -U mkdocs-git-revision-date-localized-plugin Enable it in the config file: plugins : - search # built-in search must be always activated - git-revision-date-localized : enable_creation_date : true type : iso_date This plugin creates new field in the post\u2019s meta-data which content the creation and update date. This information is used to sort the posts by revision date to get recently updated items, as shown in the Recent blog posts page.","title":"Revision date"},{"location":"blog/site-setup/mkdocs-plugins/#print-to-pdf","text":"Enabling this plugin causes very long build time when you have lot of posts! To export the posts on this blog, there are some plugins which can do it. However, most of them depend on Weasy Print which in turn depends on many other packages. There is one plugin that prints in an easy and simple way: use browser to print page by sending print command (like press Ctrl + S ). More detail of installation and configuration the MkDocs PDF with JS plugin for printing to PDF can be read in Print to PDF .","title":"Print to PDF"},{"location":"blog/site-setup/mkdocs-plugins/#macros","text":"This plugin is no longer used in this site! MkDocs Macros is a plugin/ framework that makes it easy to produce richer and more beautiful pages. It can do two things: Transform the markdown pages into a Jinja2 templates that can use variables, macros and filters. Replace MkDocs plugins for a wide range of tasks: e.g. manipulating the navigation, adding files after the HTML pages have already been generated etc. Install the plugin: pip install -U mkdocs-macros-plugin Enable it in the config file: plugins : - search # built-in search must be always activated - macros Incomplete data in macro The macro {{ navigation.pages }} contains a list of all pages, but the data of each page maybe not complete, such as title or meta-data . This issue happens when rendering a the content of the first page, but it needs to know the content of the second page which has not been parsed already as it is waiting for the first page getting done.","title":"Macros"},{"location":"blog/site-setup/mkdocs-plugins/#drawio-exporter","text":"This plugin is no longer used in this site! DrawIO Exporter is a great plugin that exports the .drawio diagrams to images at build time and insert them to the document. This plugin can replace the Mermaid plugin, and it is faster thanks to no JavaScript needed at runtime. It also helps to enable instant navigation mode of the Material theme. Install the plugin: pip install -U mkdocs-drawio-exporter Enable it in the config file: plugins : - search # built-in search must be always activated - drawio-exporter To create end edit .drawio diagram, download and install the diagrams.net application. To import a diagram, just use the syntax for inserting an image: ![ My alt text ]( my-diagram.drawio ) The plugin will generate an SVG image to a cache folder (default in docs\\drawio-exporter ), and then modify the image\u2019s source to point to the generated image. If the diagram is a multipage document, append the index of the page as an anchor in the image\u2019s URL to select the target page: ![ Page 1 ]( my-diagram.drawio#0 ) A draw.io diagram Alternative method Using Draw.io Integration extension in Visual Studio Code, I can save a DrawIO diagram as a .drawio.svg file, then use that file directly in the page as an usual image. However this method will not support multiple pages in the drawing: ![ My alt text ]( my-diagram.drawio.svg ) // work ![ My alt text ]( my-diagram.drawio.svg#1 ) // does not work","title":"DrawIO Exporter"},{"location":"blog/site-setup/mkdocs-plugins/#mermaid","text":"This plugin is no longer used in this site! MkDocs Mermaid2 is a plugin to render textual graph description into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.). Install the plugin: pip install -U mkdocs-mermaid2-plugin Enable it in the config file: plugins : - search # built-in search must be always activated - mermaid2 And configure the code block parser for mermaid2 blocks: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:mermaid2.fence_mermaid Example: ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` will render as: A diagram generated by Mermaid","title":"Mermaid"},{"location":"blog/site-setup/print-to-pdf/","tags":["python"],"text":"The cover page # When printing to a PDF file, the first page should show the post title and its short description. This page is called the cover page which will be created only in printing mode. Create an element with class cover in the post-cover.html template to wrap the cover section. In print mode, this element should cover the full height (100%) of the first paper and align its content vertically. After the line of tags, the updated date will be shown to easily check the latest version of the document: overrides\\partials\\post-cover.html The Table of Content page # When displaying on a screen, the Table of Content is displayed in the right sidebar. In printed pages, there should be a page to display the table of content too. This page is also only visible in printing. The base Material for MkDocs theme has a partial block for Table of Content section, so I just need to declare it in post-toc.html and include it in the main.html template, between the cover page and the main content. overrides\\partials\\post-toc.html There are some styles applied for this section: Hide the default label and add a new <h2> header Remove list-style to make a clear list When printing, remove color effect on link items Preview of the printing document Printing styles # There are some more additional styles need to be applied on the page when printing. I preview the printed version using Save to PDF option in the Chrome browser. Set the paper size and printing margins: @ page { size : a4 portrait ; margin : 25mm 15mm 25mm 20mm ; } Some elements only show in printing version, add media query type to display them: . md-typeset . print-only { display : none ; } @ media print { . md-typeset . print-only { display : block ; } . md-typeset . screen-only { display : none ; } } Tabs labels should be marked in printing as they are selected: . md-typeset . tabbed-set > label { border-color : var ( --md-accent-fg-color ); color : var ( --md-accent-fg-color ); } The Disqus section also needs to be hidden in printing: @ media print { . md-typeset # __comments , . md-typeset # disqus_recommendations , . md-typeset # disqus_thread { display : none ; } } Class .new-page is used for force break page in printing: @ media print { . md-typeset . new-page { page-break-after : always ; } . md-typeset . new-page + * { margin-top : 0 ; } } Image and its caption should be displayed in the same page: @ media print { . md-typeset figure { page-break-inside : avoid ; } } Admonition can be printed on multiple pages: @ media print { . md-typeset . admonition , . md-typeset details { page-break-inside : auto ; } } Print to PDF plugin # This feature is disabled by default !!! The plugin depends on Chrome and Chrome Driver, and it also consumes quite long time to finish rederning. It is recommended to manually print pages that you need. The MkDocs PDF with JS Plugin 1 exports documentation in PDF format with rendered JavaScript content. This is very useful if documents have mermaid diagrams. A download button will be added to the top of the page, and it is hidden in the PDF files. For executing the JavaScript code, ChromeDriver is used, so it is necessary to: Install Chrome , find the Chrome version in About section. Download ChromeDriver , note to choose correct version of driver based on your installed Chrome version. Add the ChromeDriver to OS user\u2019s PATH environment. After that, install the plugin: pip install -U git+https://github.com/vuquangtrong/mkdocs-pdf-with-js-plugin.git Install the original plugin with pip install mkdocs-pdf-with-js-plugin if don\u2019t need a customized version. The following features are not implemented in the original version. Enable the plugin: plugins : - search # built-in search must be always activated - pdf-with-js While building mkdocs build or serving mkdocs serve the documentation, the PDF files will be generated. They are stored in the site\\pdfs folder. Add header and footer # The command sent to ChromeDriver to print a page is Page.printToPDF , read more at Chrome DevTools Protocol \u2014 printToPDF . This command needs some parameters to control the printing, which include: landscape : boolean Paper orientation. Defaults to false. displayHeaderFooter : boolean Display header and footer. Defaults to false. headerTemplate : string HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: date : formatted print date title : document title url : document location pageNumber : current page number totalPages : total pages in the document For example, < span class = title ></ span > would generate a span containing the title . footerTemplate : string HTML template for the print footer. Should use the same format as the headerTemplate . Those parameters are initialized in the __init__ function: def __init__ ( self ): self . displayHeaderFooter = True self . headerTemplate = \\ '<div style=\"font-size:8px; margin:auto;\">' \\ '<span class=title></span>' \\ '</div>' self . footerTemplate = \\ '<div style=\"font-size:8px; margin:auto;\">' \\ 'Page <span class=\"pageNumber\"></span> of ' \\ '<span class=\"totalPages\"></span>' \\ '</div>' and they are used to creating print options in a dictionary variable: def _get_print_options ( self ): return { 'landscape' : False , 'displayHeaderFooter' : self . displayHeaderFooter , 'footerTemplate' : self . footerTemplate , 'headerTemplate' : self . headerTemplate , 'printBackground' : True , 'preferCSSPageSize' : True , } Finally, the print options are used in the print command: def print_to_pdf ( self , driver , page ): driver . get ( page [ \"url\" ]) result = self . _send_devtools_command ( driver , \"Page.printToPDF\" , self . _get_print_options () ) self . _write_file ( result [ 'data' ], page [ \"pdf_file\" ]) Add plugin config options # To allow user to change the print options in the project config file mkdocs.yml , add the config fields into the plugin.py file. class PdfWithJS ( BasePlugin ): config_scheme = ( ( 'enable' , config_options . Type ( bool , default = True )), ( 'display_header_footer' , config_options . Type ( bool , default = False )), ( 'header_template' , config_options . Type ( str , default = '' )), ( 'footer_template' , config_options . Type ( str , default = '' )), ) When the MkDocs engine calls to on_config() function in this plugin, save the user\u2019s configs as below: def on_config ( self , config , ** kwargs ): self . enabled = self . config [ 'enable' ] self . printer . set_config ( self . config [ 'display_header_footer' ], self . config [ 'header_template' ], self . config [ 'footer_template' ] ) return config By doing this, users can add their parameters to the pdf-with-js entry under the plugins field in the config file mkdocs.yml : plugins : - search # built-in search must be always activated - pdf-with-js : enable : false # should enable only when need PDF files add_download_button : false display_header_footer : true header_template : >- <div style=\"font-size:8px; margin:auto; color:lightgray;\"> <span class=\"title\"></span> </div> footer_template : >- <div style=\"font-size:8px; margin:auto; color:lightgray;\"> Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span> </div> Add a download button # Create an element to contain the download button at the beginning of the document content in the base.html template. This element should be hidden in printing mode. The plugin will find the < div class = \"btn-actions\" > element to insert a button. If there is no such existing element, the plugin will create a new element and insert to the page content. def _add_link ( self , soup , page_paths ): icon = BeautifulSoup ( '' '<span class=\"twemoji\">' '<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">' '<path d=\"M5 20h14v-2H5m14-9h-4V3H9v6H5l7 7 7-7z\"></path>' '</svg>' '</span>' , 'html.parser' ) text = \"PDF\" btn = soup . new_tag ( \"a\" , href = page_paths [ \"relpath\" ]) btn . append ( icon ) btn . append ( text ) btn [ 'class' ] = 'md-button' bar = soup . find ( \"div\" , { \"class\" : \"btn-actions\" }) if bar : bar . p . insert ( 0 , btn ) else : toc = soup . find ( \"div\" , { \"class\" : \"toc\" }) if toc : div = BeautifulSoup ( '' '<div class=\"btn-actions screen-only\">' '<p></p>' '</div>' , 'html.parser' ) div . p . insert ( 0 , btn ) toc . insert_after ( div ) return soup That\u2019s it. All blog posts now have a download button for users to get the PDF version. originally developed by smaxtec \u21a9","title":"Print Pages to PDF files"},{"location":"blog/site-setup/print-to-pdf/#the-cover-page","text":"When printing to a PDF file, the first page should show the post title and its short description. This page is called the cover page which will be created only in printing mode. Create an element with class cover in the post-cover.html template to wrap the cover section. In print mode, this element should cover the full height (100%) of the first paper and align its content vertically. After the line of tags, the updated date will be shown to easily check the latest version of the document: overrides\\partials\\post-cover.html","title":"The cover page"},{"location":"blog/site-setup/print-to-pdf/#the-table-of-content-page","text":"When displaying on a screen, the Table of Content is displayed in the right sidebar. In printed pages, there should be a page to display the table of content too. This page is also only visible in printing. The base Material for MkDocs theme has a partial block for Table of Content section, so I just need to declare it in post-toc.html and include it in the main.html template, between the cover page and the main content. overrides\\partials\\post-toc.html There are some styles applied for this section: Hide the default label and add a new <h2> header Remove list-style to make a clear list When printing, remove color effect on link items Preview of the printing document","title":"The Table of Content page"},{"location":"blog/site-setup/print-to-pdf/#printing-styles","text":"There are some more additional styles need to be applied on the page when printing. I preview the printed version using Save to PDF option in the Chrome browser. Set the paper size and printing margins: @ page { size : a4 portrait ; margin : 25mm 15mm 25mm 20mm ; } Some elements only show in printing version, add media query type to display them: . md-typeset . print-only { display : none ; } @ media print { . md-typeset . print-only { display : block ; } . md-typeset . screen-only { display : none ; } } Tabs labels should be marked in printing as they are selected: . md-typeset . tabbed-set > label { border-color : var ( --md-accent-fg-color ); color : var ( --md-accent-fg-color ); } The Disqus section also needs to be hidden in printing: @ media print { . md-typeset # __comments , . md-typeset # disqus_recommendations , . md-typeset # disqus_thread { display : none ; } } Class .new-page is used for force break page in printing: @ media print { . md-typeset . new-page { page-break-after : always ; } . md-typeset . new-page + * { margin-top : 0 ; } } Image and its caption should be displayed in the same page: @ media print { . md-typeset figure { page-break-inside : avoid ; } } Admonition can be printed on multiple pages: @ media print { . md-typeset . admonition , . md-typeset details { page-break-inside : auto ; } }","title":"Printing styles"},{"location":"blog/site-setup/print-to-pdf/#print-to-pdf-plugin","text":"This feature is disabled by default !!! The plugin depends on Chrome and Chrome Driver, and it also consumes quite long time to finish rederning. It is recommended to manually print pages that you need. The MkDocs PDF with JS Plugin 1 exports documentation in PDF format with rendered JavaScript content. This is very useful if documents have mermaid diagrams. A download button will be added to the top of the page, and it is hidden in the PDF files. For executing the JavaScript code, ChromeDriver is used, so it is necessary to: Install Chrome , find the Chrome version in About section. Download ChromeDriver , note to choose correct version of driver based on your installed Chrome version. Add the ChromeDriver to OS user\u2019s PATH environment. After that, install the plugin: pip install -U git+https://github.com/vuquangtrong/mkdocs-pdf-with-js-plugin.git Install the original plugin with pip install mkdocs-pdf-with-js-plugin if don\u2019t need a customized version. The following features are not implemented in the original version. Enable the plugin: plugins : - search # built-in search must be always activated - pdf-with-js While building mkdocs build or serving mkdocs serve the documentation, the PDF files will be generated. They are stored in the site\\pdfs folder.","title":"Print to PDF plugin"},{"location":"blog/site-setup/print-to-pdf/#add-header-and-footer","text":"The command sent to ChromeDriver to print a page is Page.printToPDF , read more at Chrome DevTools Protocol \u2014 printToPDF . This command needs some parameters to control the printing, which include: landscape : boolean Paper orientation. Defaults to false. displayHeaderFooter : boolean Display header and footer. Defaults to false. headerTemplate : string HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: date : formatted print date title : document title url : document location pageNumber : current page number totalPages : total pages in the document For example, < span class = title ></ span > would generate a span containing the title . footerTemplate : string HTML template for the print footer. Should use the same format as the headerTemplate . Those parameters are initialized in the __init__ function: def __init__ ( self ): self . displayHeaderFooter = True self . headerTemplate = \\ '<div style=\"font-size:8px; margin:auto;\">' \\ '<span class=title></span>' \\ '</div>' self . footerTemplate = \\ '<div style=\"font-size:8px; margin:auto;\">' \\ 'Page <span class=\"pageNumber\"></span> of ' \\ '<span class=\"totalPages\"></span>' \\ '</div>' and they are used to creating print options in a dictionary variable: def _get_print_options ( self ): return { 'landscape' : False , 'displayHeaderFooter' : self . displayHeaderFooter , 'footerTemplate' : self . footerTemplate , 'headerTemplate' : self . headerTemplate , 'printBackground' : True , 'preferCSSPageSize' : True , } Finally, the print options are used in the print command: def print_to_pdf ( self , driver , page ): driver . get ( page [ \"url\" ]) result = self . _send_devtools_command ( driver , \"Page.printToPDF\" , self . _get_print_options () ) self . _write_file ( result [ 'data' ], page [ \"pdf_file\" ])","title":"Add header and footer"},{"location":"blog/site-setup/print-to-pdf/#add-plugin-config-options","text":"To allow user to change the print options in the project config file mkdocs.yml , add the config fields into the plugin.py file. class PdfWithJS ( BasePlugin ): config_scheme = ( ( 'enable' , config_options . Type ( bool , default = True )), ( 'display_header_footer' , config_options . Type ( bool , default = False )), ( 'header_template' , config_options . Type ( str , default = '' )), ( 'footer_template' , config_options . Type ( str , default = '' )), ) When the MkDocs engine calls to on_config() function in this plugin, save the user\u2019s configs as below: def on_config ( self , config , ** kwargs ): self . enabled = self . config [ 'enable' ] self . printer . set_config ( self . config [ 'display_header_footer' ], self . config [ 'header_template' ], self . config [ 'footer_template' ] ) return config By doing this, users can add their parameters to the pdf-with-js entry under the plugins field in the config file mkdocs.yml : plugins : - search # built-in search must be always activated - pdf-with-js : enable : false # should enable only when need PDF files add_download_button : false display_header_footer : true header_template : >- <div style=\"font-size:8px; margin:auto; color:lightgray;\"> <span class=\"title\"></span> </div> footer_template : >- <div style=\"font-size:8px; margin:auto; color:lightgray;\"> Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span> </div>","title":"Add plugin config options"},{"location":"blog/site-setup/print-to-pdf/#add-a-download-button","text":"Create an element to contain the download button at the beginning of the document content in the base.html template. This element should be hidden in printing mode. The plugin will find the < div class = \"btn-actions\" > element to insert a button. If there is no such existing element, the plugin will create a new element and insert to the page content. def _add_link ( self , soup , page_paths ): icon = BeautifulSoup ( '' '<span class=\"twemoji\">' '<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">' '<path d=\"M5 20h14v-2H5m14-9h-4V3H9v6H5l7 7 7-7z\"></path>' '</svg>' '</span>' , 'html.parser' ) text = \"PDF\" btn = soup . new_tag ( \"a\" , href = page_paths [ \"relpath\" ]) btn . append ( icon ) btn . append ( text ) btn [ 'class' ] = 'md-button' bar = soup . find ( \"div\" , { \"class\" : \"btn-actions\" }) if bar : bar . p . insert ( 0 , btn ) else : toc = soup . find ( \"div\" , { \"class\" : \"toc\" }) if toc : div = BeautifulSoup ( '' '<div class=\"btn-actions screen-only\">' '<p></p>' '</div>' , 'html.parser' ) div . p . insert ( 0 , btn ) toc . insert_after ( div ) return soup That\u2019s it. All blog posts now have a download button for users to get the PDF version. originally developed by smaxtec \u21a9","title":"Add a download button"},{"location":"blog/site-setup/protected-page/","tags":["encryption"],"text":"CYV5gi6oixh4j9jelSTJQw==;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;^","title":"[Protected] A Password-proteted private page!"},{"location":"blog/site-setup/protected-page/#encryption","text":"N2AxtJV9oPfyPsOCbc12/w==;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;^","title":"Encryption"},{"location":"blog/site-setup/protected-page/#decrypted-content","text":"80vM8ZBge1z/kqNaLVkOIA==;8Sbumull4WrZmagdgzdZ+MNSktSSQXO5u0ZCWyb2/6fYle01QeJzvkvceEqTvtkMMgN7Jh+BCcuEN+7NtApPEsivCZ8XJ6kJ0j7TPTulP6BxSqqpMOaR6wJYq2QrVAY4bELbqoPv1aOCpGhntvrmo1wmpa/lkvOF1M/jjsAuNgJL06xolgnnuYhnY3LP5socLVA7h+80dYtDntKQr9Tb3r9Wa/iFGq+SZ5dRn8eQ2priTzgDPXQRIqCvVQlUAJ9eNQtzIquSmiYUsVj7Vh+n3DHL19Xow2tjfuDSBWe863dMGJedZm9t471t9xc7VaNA8+j2+JYsW75kRTx1TYw4pTP8i9Sn+3Y6xzcN9i2kcnU8tzWMzxzJaGqeA+5A3fQzcXEHR+AgfU1oV1redLosN+1lcXwaOAMmCD06ElEK+7GA/MSoCBTJq85ogCF0rXsZqSStV1O9CbMuRClmdVURfQ==;^","title":"Decrypted Content"},{"location":"tags/","text":"","title":"Tags"}]}